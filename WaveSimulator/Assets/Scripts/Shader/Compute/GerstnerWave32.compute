#pragma kernel WaveGenerator

#define PI 3.14159265358979323846


RWStructuredBuffer<float3> _Vertices;

uint _Resolution;
float _Time, _Scaling;
float4 _Wave0;
float3 _Shift;

float3 GerstnerWave (float4 wave, float3 position)
{
    const float steepness = wave.z;
    const float wavelength = wave.w;
    const float k = 2 * PI / wavelength;
    const float c = sqrt(9.8 / k);
    const float2 d = normalize(wave.xy);
    const float f = k * (dot(d, position.xz) - c * _Time);
    const float a = steepness / k;

    return float3(
        a * cos(f),
        a * sin(f),
        a * cos(f));
}

[numthreads(32,1,32)]
void WaveGenerator (uint3 id : SV_DispatchThreadID)
{
    if(id.x < _Resolution && id.z < _Resolution)
    {
        float3 pos = id.xyz;
        
        pos += GerstnerWave(_Wave0, pos);
        
        pos.x += _Shift.x;
        pos.z += _Shift.z;
        
        pos.x *= _Scaling;
        pos.z *= _Scaling;

        normalize(pos);
        
        _Vertices[id.x + id.z * _Resolution] = pos;
    }
}